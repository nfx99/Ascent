"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateascent"]("main",{

/***/ 199684:
/*!***********************************************!*\
  !*** ./src/renderer/context/HabitContext.tsx ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useHabits = exports.HabitProvider = void 0;\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ 474848);\nconst react_1 = __importStar(__webpack_require__(/*! react */ 296540));\nconst habit_1 = __webpack_require__(/*! ../types/habit */ 414105);\nconst HabitContext = (0, react_1.createContext)(undefined);\nconst STORAGE_KEY = 'habits';\nconst HabitProvider = ({ children }) => {\n    const [habits, setHabits] = (0, react_1.useState)(() => {\n        try {\n            const savedHabits = localStorage.getItem(STORAGE_KEY);\n            if (!savedHabits)\n                return [];\n            const parsedHabits = JSON.parse(savedHabits);\n            if (!Array.isArray(parsedHabits)) {\n                console.error('Invalid habits data in localStorage');\n                return [];\n            }\n            // Migrate old data if needed\n            return parsedHabits.map((habit) => ({\n                ...habit,\n                updatedAt: habit.updatedAt || habit.createdAt,\n                archived: habit.archived || false,\n                completions: habit.completions.map(completion => ({\n                    ...completion,\n                    completedAt: completion.completedAt || new Date(completion.date).toISOString(),\n                })),\n            }));\n        }\n        catch (error) {\n            console.error('Error loading habits from localStorage:', error);\n            return [];\n        }\n    });\n    const [error, setError] = (0, react_1.useState)(null);\n    (0, react_1.useEffect)(() => {\n        try {\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(habits));\n        }\n        catch (error) {\n            console.error('Error saving habits to localStorage:', error);\n            setError('Failed to save habits. Please try again.');\n        }\n    }, [habits]);\n    const addHabit = (0, react_1.useCallback)((habit) => {\n        setError(null);\n        try {\n            if (habits.length >= habit_1.MAX_HABITS) {\n                setError(`You can't create more than ${habit_1.MAX_HABITS} habits.`);\n                return;\n            }\n            if (habits.some(h => h.name.toLowerCase() === habit.name.toLowerCase())) {\n                setError('A habit with this name already exists.');\n                return;\n            }\n            const validationErrors = (0, habit_1.validateHabit)(habit);\n            if (validationErrors.length > 0) {\n                setError(validationErrors[0].message);\n                return;\n            }\n            const now = new Date().toISOString();\n            const newHabit = {\n                ...habit,\n                id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n                createdAt: now,\n                updatedAt: now,\n                completions: [],\n                archived: false,\n            };\n            setHabits(prev => [...prev, newHabit]);\n        }\n        catch (error) {\n            console.error('Error adding habit:', error);\n            setError('Failed to add habit. Please try again.');\n        }\n    }, [habits]);\n    const toggleHabitCompletion = (0, react_1.useCallback)((habitId, date, quantity, notes) => {\n        setError(null);\n        if (!habitId || !date) {\n            setError('Invalid habit or date.');\n            return;\n        }\n        setHabits(prev => prev.map(habit => {\n            if (habit.id === habitId) {\n                const existingCompletion = habit.completions.find(c => c.date === date);\n                let newCompletions;\n                if (existingCompletion) {\n                    // Remove completion if it exists\n                    newCompletions = habit.completions.filter(c => c.date !== date);\n                }\n                else {\n                    // Add new completion\n                    if (habit.completions.length >= habit_1.MAX_COMPLETIONS_PER_HABIT) {\n                        setError('Maximum number of completions reached for this habit.');\n                        return habit;\n                    }\n                    const completion = {\n                        date,\n                        completedAt: new Date().toISOString(),\n                    };\n                    if (habit.trackQuantity && typeof quantity === 'number') {\n                        completion.quantity = quantity;\n                    }\n                    if (notes?.trim()) {\n                        completion.notes = notes.trim();\n                    }\n                    newCompletions = [...habit.completions, completion];\n                }\n                return {\n                    ...habit,\n                    completions: newCompletions,\n                    updatedAt: new Date().toISOString(),\n                };\n            }\n            return habit;\n        }));\n    }, []);\n    const deleteHabit = (0, react_1.useCallback)((habitId) => {\n        setError(null);\n        if (!habitId) {\n            setError('Invalid habit ID.');\n            return;\n        }\n        setHabits(prev => {\n            const habitExists = prev.some(h => h.id === habitId);\n            if (!habitExists) {\n                setError('Habit not found.');\n                return prev;\n            }\n            return prev.filter(habit => habit.id !== habitId);\n        });\n    }, []);\n    const archiveHabit = (0, react_1.useCallback)((habitId) => {\n        setError(null);\n        if (!habitId) {\n            setError('Invalid habit ID.');\n            return;\n        }\n        setHabits(prev => prev.map(habit => {\n            if (habit.id === habitId) {\n                return {\n                    ...habit,\n                    archived: true,\n                    updatedAt: new Date().toISOString(),\n                };\n            }\n            return habit;\n        }));\n    }, []);\n    const getHabitStats = (0, react_1.useCallback)((habitId) => {\n        const habit = habits.find(h => h.id === habitId);\n        if (!habit)\n            return null;\n        const completions = habit.completions;\n        const totalCompletions = completions.length;\n        // Calculate streaks\n        let currentStreak = 0;\n        let longestStreak = 0;\n        let currentCount = 0;\n        // Sort completions by date\n        const sortedDates = completions\n            .map(c => new Date(c.date))\n            .sort((a, b) => b.getTime() - a.getTime());\n        if (sortedDates.length > 0) {\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            let currentDate = new Date(sortedDates[0]);\n            currentDate.setHours(0, 0, 0, 0);\n            // Calculate current streak\n            while (currentDate <= today) {\n                const hasCompletion = sortedDates.some(date => date.getFullYear() === currentDate.getFullYear() &&\n                    date.getMonth() === currentDate.getMonth() &&\n                    date.getDate() === currentDate.getDate());\n                if (hasCompletion) {\n                    currentCount++;\n                }\n                else {\n                    break;\n                }\n                currentDate.setDate(currentDate.getDate() - 1);\n            }\n            currentStreak = currentCount;\n            longestStreak = currentCount;\n            // Calculate longest streak\n            currentCount = 0;\n            for (let i = 0; i < sortedDates.length - 1; i++) {\n                const date1 = sortedDates[i];\n                const date2 = sortedDates[i + 1];\n                const diffDays = Math.round((date1.getTime() - date2.getTime()) / (1000 * 60 * 60 * 24));\n                if (diffDays === 1) {\n                    currentCount++;\n                    longestStreak = Math.max(longestStreak, currentCount);\n                }\n                else {\n                    currentCount = 0;\n                }\n            }\n        }\n        // Calculate completion rate\n        const daysSinceCreation = Math.ceil((new Date().getTime() - new Date(habit.createdAt).getTime()) / (1000 * 60 * 60 * 24));\n        const completionRate = (totalCompletions / daysSinceCreation) * 100;\n        // Calculate quantity stats if applicable\n        let averageQuantity;\n        let totalQuantity;\n        if (habit.trackQuantity) {\n            const quantities = completions\n                .map(c => c.quantity)\n                .filter((q) => typeof q === 'number');\n            if (quantities.length > 0) {\n                totalQuantity = quantities.reduce((sum, q) => sum + q, 0);\n                averageQuantity = totalQuantity / quantities.length;\n            }\n        }\n        return {\n            totalCompletions,\n            currentStreak,\n            longestStreak,\n            completionRate,\n            averageQuantity,\n            totalQuantity,\n            lastCompletionDate: completions.length > 0 ? completions[completions.length - 1].date : undefined,\n        };\n    }, [habits]);\n    const value = react_1.default.useMemo(() => ({\n        habits,\n        addHabit,\n        toggleHabitCompletion,\n        deleteHabit,\n        archiveHabit,\n        getHabitStats,\n        error,\n    }), [habits, addHabit, toggleHabitCompletion, deleteHabit, archiveHabit, getHabitStats, error]);\n    return ((0, jsx_runtime_1.jsx)(HabitContext.Provider, { value: value, children: children }));\n};\nexports.HabitProvider = HabitProvider;\nconst useHabits = () => {\n    const context = (0, react_1.useContext)(HabitContext);\n    if (context === undefined) {\n        throw new Error('useHabits must be used within a HabitProvider');\n    }\n    return context;\n};\nexports.useHabits = useHabits;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///199684\n");

/***/ })

});