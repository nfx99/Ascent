"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateascent"]("main",{

/***/ 587222:
/*!***********************************************!*\
  !*** ./src/renderer/components/HabitCard.tsx ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ 474848);\nconst react_1 = __importStar(__webpack_require__(/*! react */ 296540));\nconst material_1 = __webpack_require__(/*! @mui/material */ 495304);\nconst icons_material_1 = __webpack_require__(/*! @mui/icons-material */ 465113);\nconst date_fns_1 = __webpack_require__(/*! date-fns */ 917705);\nconst ThemeContext_1 = __webpack_require__(/*! ../context/ThemeContext */ 49211);\nconst HabitCard = ({ habit, onToggleCompletion, onDelete }) => {\n    const { mode } = (0, ThemeContext_1.useTheme)();\n    const [isLogDialogOpen, setIsLogDialogOpen] = (0, react_1.useState)(false);\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = (0, react_1.useState)(false);\n    const [selectedDate, setSelectedDate] = (0, react_1.useState)(new Date());\n    const [quantity, setQuantity] = (0, react_1.useState)('');\n    const [useCheckbox, setUseCheckbox] = (0, react_1.useState)(true);\n    const [selectedYear, setSelectedYear] = (0, react_1.useState)(new Date().getFullYear());\n    // Define constants first\n    const CELL_GAP = 1; // Minimum gap for compact layout\n    const WEEKDAY_LABEL_WIDTH = 15; // Smaller width for weekday labels\n    // Debug function to log grid information\n    const debugGridInfo = (0, react_1.useCallback)((grid) => {\n        const totalWeeks = grid.length;\n        const daysInFullYear = new Date(selectedYear, 0, 0).getDate() === 366 ? 366 : 365;\n        const daysInCurrentYear = grid.flat().filter(date => date.getFullYear() === selectedYear).length;\n        const jan1 = grid.flat().find(date => date.getFullYear() === selectedYear && date.getMonth() === 0 && date.getDate() === 1);\n        const dec31 = grid.flat().find(date => date.getFullYear() === selectedYear && date.getMonth() === 11 && date.getDate() === 31);\n        console.log(`Grid for ${selectedYear}: ${totalWeeks} weeks Ã— 7 days`);\n        console.log(`Days in year: ${daysInFullYear}, days displayed from year: ${daysInCurrentYear}`);\n        console.log(`Jan 1 present: ${!!jan1}, Dec 31 present: ${!!dec31}`);\n        // Check if the grid is 52 or 53 weeks (standard for a year)\n        const isStandardSize = totalWeeks >= 52 && totalWeeks <= 53;\n        console.log(`Grid size check: ${isStandardSize ? 'PASSED' : 'FAILED'} - ${totalWeeks} weeks (should be 52-53)`);\n        return {\n            size: totalWeeks,\n            daysInYear: daysInCurrentYear,\n            hasJan1: !!jan1,\n            hasDec31: !!dec31,\n            isCorrectSize: isStandardSize\n        };\n    }, [selectedYear]);\n    // Build grid: grid[col][row] = date or null\n    // Col = week, Row = weekday\n    const grid = (0, react_1.useMemo)(() => {\n        // Get the start and end dates for the year\n        const jan1 = new Date(selectedYear, 0, 1);\n        const dec31 = new Date(selectedYear, 11, 31);\n        // Find the first Sunday before or on Jan 1\n        const firstDayOfGrid = new Date(jan1);\n        const firstDayOfWeek = (0, date_fns_1.getDay)(firstDayOfGrid);\n        firstDayOfGrid.setDate(firstDayOfGrid.getDate() - firstDayOfWeek);\n        // Find the last Saturday after or on Dec 31\n        const lastDayOfGrid = new Date(dec31);\n        const lastDayOfWeek = (0, date_fns_1.getDay)(lastDayOfGrid);\n        lastDayOfGrid.setDate(lastDayOfGrid.getDate() + (6 - lastDayOfWeek));\n        // Calculate the total number of weeks\n        // Add 1 because differenceInCalendarWeeks is exclusive of end date\n        const totalWeeks = Math.ceil((lastDayOfGrid.getTime() - firstDayOfGrid.getTime()) / (7 * 24 * 60 * 60 * 1000));\n        // Create the grid with the correct number of weeks\n        const newGrid = [];\n        // Start with the first day of the grid\n        let currentDate = new Date(firstDayOfGrid);\n        // Generate all weeks\n        for (let week = 0; week < totalWeeks; week++) {\n            const weekRow = [];\n            // Generate days for each week\n            for (let day = 0; day < 7; day++) {\n                weekRow.push(new Date(currentDate));\n                currentDate.setDate(currentDate.getDate() + 1);\n            }\n            newGrid.push(weekRow);\n        }\n        // Count days in the current year for debugging\n        const daysInYear = newGrid.flat().filter(date => date.getFullYear() === selectedYear).length;\n        // Log debug info\n        console.log(`Calendar grid for ${selectedYear}: ${totalWeeks} weeks (${newGrid.length}x7), ${daysInYear} days in year`);\n        return newGrid;\n    }, [selectedYear]);\n    // Define dynamic cell size based on available width\n    const calculateCellSize = (0, react_1.useCallback)(() => {\n        // Calculate the smallest possible cell size that fits all weeks without scrolling\n        const availableWidth = Math.min(window.innerWidth - 60, 1200);\n        const weekdayLabelSpace = WEEKDAY_LABEL_WIDTH + 2;\n        // Calculate total weeks to display (should be 52 or 53)\n        const totalWeeks = grid.length;\n        // Calculate minimum cell size that would fill the available width\n        // Account for gaps between cells\n        const totalGapWidth = CELL_GAP * (totalWeeks - 1);\n        const widthForCells = availableWidth - weekdayLabelSpace - totalGapWidth;\n        const cellSize = Math.floor(widthForCells / totalWeeks);\n        // Use minimum size that ensures visibility but allows all cells to fit\n        const size = Math.max(cellSize, 4);\n        console.log(`Cell size calculation: ${totalWeeks} weeks, ${size}px per cell, available width: ${availableWidth}px`);\n        return size;\n    }, [grid]);\n    // Calculate cell size once on component mount\n    const CELL_SIZE = (0, react_1.useMemo)(() => {\n        // Calculate a proper cell size based on grid width\n        const result = calculateCellSize();\n        // Debug grid information\n        debugGridInfo(grid);\n        return result;\n    }, [calculateCellSize, grid, debugGridInfo]);\n    // Generate month labels based on actual cell dates\n    const monthLabels = (0, react_1.useMemo)(() => {\n        const labels = [];\n        // Find the first column (week) of each month in the grid\n        for (let month = 0; month < 12; month++) {\n            // First day of the month\n            const firstDayOfMonth = new Date(selectedYear, month, 1);\n            let foundColumn = -1;\n            // Find which column (week) contains the first day of this month\n            for (let colIdx = 0; colIdx < grid.length; colIdx++) {\n                for (let rowIdx = 0; rowIdx < 7; rowIdx++) {\n                    const day = grid[colIdx][rowIdx];\n                    // Check if this cell contains the first day of this month\n                    if (day &&\n                        day.getDate() === 1 &&\n                        (0, date_fns_1.getMonth)(day) === month &&\n                        (0, date_fns_1.getYear)(day) === selectedYear) {\n                        foundColumn = colIdx;\n                        break;\n                    }\n                }\n                if (foundColumn !== -1)\n                    break;\n            }\n            // If we found the first day of this month in the grid\n            if (foundColumn !== -1) {\n                labels.push({\n                    col: foundColumn,\n                    month: (0, date_fns_1.format)(firstDayOfMonth, 'MMM')\n                });\n            }\n        }\n        return labels;\n    }, [grid, selectedYear]);\n    const isHabitCompleted = (0, react_1.useCallback)((date) => {\n        return habit.completions.some(completion => completion.date === (0, date_fns_1.format)(date, 'yyyy-MM-dd'));\n    }, [habit.completions]);\n    const calculateStreak = (0, react_1.useCallback)(() => {\n        let streak = 0;\n        const today = new Date();\n        let currentDate = new Date();\n        while (isHabitCompleted(currentDate) && !(0, date_fns_1.isAfter)(currentDate, today)) {\n            streak++;\n            currentDate.setDate(currentDate.getDate() - 1);\n        }\n        return streak;\n    }, [isHabitCompleted]);\n    const handleLogSubmit = (0, react_1.useCallback)(() => {\n        // For habits that track quantity, use the quantity value\n        if (habit.trackQuantity) {\n            if (quantity !== '') {\n                onToggleCompletion((0, date_fns_1.format)(selectedDate, 'yyyy-MM-dd'), Number(quantity));\n            }\n        }\n        else {\n            // For non-quantity habits, always mark as completed\n            onToggleCompletion((0, date_fns_1.format)(selectedDate, 'yyyy-MM-dd'));\n        }\n        setIsLogDialogOpen(false);\n        setQuantity('');\n        setUseCheckbox(true);\n    }, [habit.trackQuantity, selectedDate, quantity, onToggleCompletion]);\n    const handleDayClick = (0, react_1.useCallback)((day) => {\n        if ((0, date_fns_1.isAfter)(day, new Date())) {\n            return; // Don't allow logging future dates\n        }\n        setSelectedDate(day);\n        setIsLogDialogOpen(true);\n    }, []);\n    const streak = (0, react_1.useMemo)(() => calculateStreak(), [calculateStreak]);\n    const isDayCompleted = (0, react_1.useCallback)((date) => {\n        return habit.completions.some(completion => completion.date === (0, date_fns_1.format)(date, 'yyyy-MM-dd'));\n    }, [habit.completions]);\n    const handlePrevYear = (0, react_1.useCallback)(() => {\n        setSelectedYear(prev => prev - 1);\n    }, []);\n    const handleNextYear = (0, react_1.useCallback)(() => {\n        setSelectedYear(prev => prev + 1);\n    }, []);\n    // Debug information about grid composition\n    (0, react_1.useEffect)(() => {\n        // Log important grid metrics\n        const gridWeeks = grid.length;\n        const daysInYear = new Date(selectedYear, 0, 0).getDate() === 366 ? 366 : 365;\n        const daysInGrid = grid.flat().length;\n        const daysInSelectedYear = grid.flat().filter(date => date.getFullYear() === selectedYear).length;\n        console.log(`\r\n      --- Year ${selectedYear} Calendar Grid ---\r\n      Total weeks (columns): ${gridWeeks}\r\n      Total days in grid: ${daysInGrid}\r\n      Days in ${selectedYear}: ${daysInYear}\r\n      Days from ${selectedYear} in grid: ${daysInSelectedYear}\r\n      Grid dimensions: ${gridWeeks} columns Ã— 7 rows\r\n      Cell size: ${CELL_SIZE}px\r\n    `);\n    }, [grid, selectedYear, CELL_SIZE]);\n    return ((0, jsx_runtime_1.jsxs)(material_1.Paper, { elevation: 0, sx: {\n            p: 2,\n            pb: 1,\n            mb: 2,\n            bgcolor: 'background.paper',\n            display: 'flex',\n            flexDirection: 'column',\n            border: '1px solid',\n            borderColor: 'divider',\n            borderRadius: '8px',\n            boxShadow: mode === 'dark'\n                ? '0 2px 8px rgba(0,0,0,0.3)'\n                : '0 2px 8px rgba(0,0,0,0.05)',\n            width: '100%',\n            maxWidth: '100%',\n            overflowX: 'hidden'\n        }, children: [(0, jsx_runtime_1.jsxs)(material_1.Box, { sx: { width: '100%', mx: 'auto', mb: 0 }, children: [(0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"h5\", align: \"center\", noWrap: true, title: habit.name, sx: {\n                            mt: 0,\n                            mb: 1,\n                            width: '100%',\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                            color: habit.color,\n                            fontWeight: 600,\n                            letterSpacing: '0.01em',\n                            textShadow: mode === 'dark'\n                                ? '0 1px 2px rgba(0,0,0,0.3)'\n                                : '0 1px 1px rgba(0,0,0,0.1)',\n                            fontSize: '1.2rem',\n                            borderBottom: `2px solid ${habit.color}33`,\n                            paddingBottom: 0.5,\n                            position: 'relative',\n                            '&::after': {\n                                content: '\"\"',\n                                position: 'absolute',\n                                bottom: '-2px',\n                                left: 0,\n                                width: '100%',\n                                borderBottom: `2px solid ${habit.color}33`,\n                            }\n                        }, children: habit.name }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                            mb: 0.5,\n                            px: 0.5\n                        }, children: [(0, jsx_runtime_1.jsx)(material_1.Box, { sx: { display: 'flex', alignItems: 'center' }, children: (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: { display: 'flex', alignItems: 'center' }, children: [(0, jsx_runtime_1.jsx)(material_1.IconButton, { size: \"small\", onClick: handlePrevYear, sx: { color: 'text.primary', p: 0.5 }, children: (0, jsx_runtime_1.jsx)(icons_material_1.ChevronLeft, { fontSize: \"small\" }) }), (0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"body2\", sx: {\n                                                mx: 0.5,\n                                                fontWeight: 'bold',\n                                                color: 'text.primary',\n                                                fontSize: '0.8rem'\n                                            }, children: selectedYear }), (0, jsx_runtime_1.jsx)(material_1.IconButton, { size: \"small\", onClick: handleNextYear, disabled: selectedYear >= new Date().getFullYear(), sx: { color: 'text.primary', p: 0.5 }, children: (0, jsx_runtime_1.jsx)(icons_material_1.ChevronRight, { fontSize: \"small\" }) })] }) }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: { display: 'flex', alignItems: 'center', gap: 0.5 }, children: [(0, jsx_runtime_1.jsx)(material_1.Tooltip, { title: `Current streak: ${streak} days`, children: (0, jsx_runtime_1.jsxs)(material_1.Typography, { variant: \"body2\", color: \"text.secondary\", sx: {\n                                                display: 'flex',\n                                                alignItems: 'center',\n                                                fontSize: '0.8rem'\n                                            }, children: [\"\\uD83D\\uDD25 \", (0, jsx_runtime_1.jsx)(\"span\", { style: { fontWeight: 'bold', marginLeft: '2px' }, children: streak })] }) }), (0, jsx_runtime_1.jsx)(material_1.Button, { variant: \"contained\", size: \"small\", startIcon: (0, jsx_runtime_1.jsx)(icons_material_1.Add, { fontSize: \"small\" }), onClick: () => {\n                                            setSelectedDate(new Date());\n                                            setIsLogDialogOpen(true);\n                                        }, sx: {\n                                            py: 0.4,\n                                            px: 1,\n                                            minWidth: '50px',\n                                            fontSize: '0.75rem',\n                                            bgcolor: `${habit.color}99`,\n                                            '&:hover': {\n                                                bgcolor: `${habit.color}cc`,\n                                            }\n                                        }, children: \"Log\" }), (0, jsx_runtime_1.jsx)(material_1.IconButton, { size: \"small\", color: \"error\", onClick: () => setIsDeleteDialogOpen(true), sx: { p: 0.5 }, children: (0, jsx_runtime_1.jsx)(icons_material_1.Delete, { fontSize: \"small\" }) })] })] }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                            width: '100%',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'flex-start',\n                            overflow: 'hidden',\n                            maxWidth: '100%',\n                            position: 'relative'\n                        }, children: [(0, jsx_runtime_1.jsxs)(material_1.Typography, { variant: \"caption\", sx: {\n                                    position: 'absolute',\n                                    top: 0,\n                                    right: 0,\n                                    fontSize: '0.6rem',\n                                    color: 'text.secondary',\n                                    opacity: 0.7\n                                }, children: [grid.length, \" wk \\u00D7 7 d\"] }), (0, jsx_runtime_1.jsx)(material_1.Box, { sx: {\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    mb: 0.3,\n                                    ml: `${WEEKDAY_LABEL_WIDTH}px`,\n                                    width: `calc(${grid.length * (CELL_SIZE + CELL_GAP)}px)`,\n                                    justifyContent: 'flex-start',\n                                    position: 'relative',\n                                    height: '12px', // Smaller height for labels\n                                    overflow: 'visible'\n                                }, children: monthLabels.map((label, idx) => {\n                                    // Calculate position to center it precisely above the first cell of the month\n                                    const position = label.col * (CELL_SIZE + CELL_GAP) + (CELL_SIZE / 2);\n                                    return ((0, jsx_runtime_1.jsx)(material_1.Box, { sx: {\n                                            position: 'absolute',\n                                            left: `${position}px`,\n                                            transform: 'translateX(-50%)', // Center the label on the cell\n                                            textAlign: 'center',\n                                            zIndex: 2 // Ensure labels don't get overlapped\n                                        }, children: (0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"caption\", noWrap: true, sx: {\n                                                fontSize: '0.6rem', // Smaller font size\n                                                color: 'text.secondary',\n                                                fontWeight: 'bold',\n                                                lineHeight: 1,\n                                                display: 'inline-block',\n                                                whiteSpace: 'nowrap'\n                                            }, children: label.month }) }, idx));\n                                }) }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                                    display: 'grid',\n                                    gridTemplateColumns: `${WEEKDAY_LABEL_WIDTH}px repeat(${grid.length}, ${CELL_SIZE}px)`,\n                                    gap: CELL_GAP,\n                                    mb: 0,\n                                    width: `${WEEKDAY_LABEL_WIDTH + (grid.length * (CELL_SIZE + CELL_GAP)) - CELL_GAP}px`,\n                                    maxWidth: '100%',\n                                    overflowX: 'hidden',\n                                    overflowY: 'hidden',\n                                    justifyContent: 'flex-start',\n                                    paddingBottom: '2px'\n                                }, children: [[0, 1, 2, 3, 4, 5, 6].map((weekday) => ((0, jsx_runtime_1.jsx)(material_1.Box, { sx: {\n                                            gridColumn: 1,\n                                            gridRow: weekday + 1,\n                                            justifySelf: 'end',\n                                            pr: 0.3,\n                                            width: WEEKDAY_LABEL_WIDTH - 2,\n                                            bgcolor: mode === 'dark' ? 'background.paper' : 'background.paper'\n                                        }, children: (0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"caption\", sx: {\n                                                fontSize: '0.6rem',\n                                                color: 'text.secondary',\n                                                lineHeight: 1\n                                            }, children: ['S', 'M', 'T', 'W', 'T', 'F', 'S'][weekday] }) }, weekday))), grid.map((weekColumn, colIdx) => (weekColumn.map((day, rowIdx) => {\n                                        // Get the date for this cell position from our grid\n                                        const cellDate = day;\n                                        // Check if this cell's date is in the current year\n                                        const isInCurrentYear = cellDate.getFullYear() === selectedYear;\n                                        // Check if this is the first day of a month\n                                        const isFirstDayOfMonth = cellDate.getDate() === 1;\n                                        // Determine month boundaries - last day of the month\n                                        const isLastDayOfMonth = (() => {\n                                            const nextDay = new Date(cellDate);\n                                            nextDay.setDate(cellDate.getDate() + 1);\n                                            return (0, date_fns_1.getMonth)(nextDay) !== (0, date_fns_1.getMonth)(cellDate);\n                                        })();\n                                        const isCompleted = isDayCompleted(cellDate);\n                                        const isFuture = (0, date_fns_1.isAfter)(cellDate, new Date());\n                                        const isCurrentDay = (0, date_fns_1.isToday)(cellDate);\n                                        // Month boundary color\n                                        const monthBorderColor = mode === 'dark'\n                                            ? (isInCurrentYear ? 'rgba(255,255,255,0.5)' : 'rgba(255,255,255,0.2)')\n                                            : (isInCurrentYear ? 'rgba(0,0,0,0.4)' : 'rgba(0,0,0,0.2)');\n                                        return ((0, jsx_runtime_1.jsx)(material_1.Box, { sx: {\n                                                gridColumn: colIdx + 2, // +2 because first column is for weekday labels\n                                                gridRow: rowIdx + 1,\n                                                width: CELL_SIZE,\n                                                height: CELL_SIZE,\n                                                bgcolor: isCompleted && isInCurrentYear\n                                                    ? habit.color + (mode === 'dark' ? 'aa' : '99')\n                                                    : mode === 'dark'\n                                                        ? (isInCurrentYear ? 'rgba(255,255,255,0.05)' : 'rgba(255,255,255,0.02)')\n                                                        : (isInCurrentYear ? 'transparent' : 'rgba(0,0,0,0.02)'),\n                                                border: isCurrentDay\n                                                    ? `1px solid ${habit.color}`\n                                                    : `1px solid ${mode === 'dark' ? '#444' : '#e0e0e0'}`,\n                                                // Simplified border styling for small cells\n                                                ...(CELL_SIZE < 6 ? {} : (isInCurrentYear && {\n                                                    borderLeft: isFirstDayOfMonth ? `2px solid ${monthBorderColor}` : undefined,\n                                                    borderRight: isLastDayOfMonth ? `2px solid ${monthBorderColor}` : undefined,\n                                                    borderTop: rowIdx === 0 && isFirstDayOfMonth ? `2px solid ${monthBorderColor}` : undefined,\n                                                    borderBottom: rowIdx === 6 && isFirstDayOfMonth ? `2px solid ${monthBorderColor}` : undefined,\n                                                })),\n                                                borderRadius: CELL_SIZE < 6 ? '0px' : '1px',\n                                                cursor: (isFuture || !isInCurrentYear) ? 'default' : 'pointer',\n                                                opacity: isFuture ? 0.3 : (isInCurrentYear ? 1 : 0.3),\n                                                transition: 'background-color 0.2s',\n                                                '&:hover': isInCurrentYear && !isFuture ? {\n                                                    bgcolor: isCompleted\n                                                        ? habit.color + 'cc'\n                                                        : mode === 'dark' ? 'rgba(255,255,255,0.1)' : '#f5f5f5',\n                                                } : {},\n                                            }, onClick: () => isInCurrentYear && !isFuture && handleDayClick(cellDate) }, `cell-${colIdx}-${rowIdx}`));\n                                    })))] })] })] }), (0, jsx_runtime_1.jsxs)(material_1.Dialog, { open: isLogDialogOpen, onClose: () => setIsLogDialogOpen(false), maxWidth: \"xs\", fullWidth: true, PaperProps: {\n                    sx: {\n                        borderRadius: '12px',\n                        boxShadow: mode === 'dark'\n                            ? '0 8px 30px rgba(0,0,0,0.5)'\n                            : '0 8px 30px rgba(0,0,0,0.12)',\n                        overflow: 'hidden',\n                        bgcolor: 'background.paper',\n                    }\n                }, children: [(0, jsx_runtime_1.jsxs)(material_1.DialogTitle, { sx: {\n                            borderBottom: '1px solid',\n                            borderColor: 'divider',\n                            pb: 2,\n                            background: `linear-gradient(45deg, ${habit.color} 30%, ${habit.color}99 90%)`,\n                            color: '#fff',\n                        }, children: [\"Log \", habit.name] }), (0, jsx_runtime_1.jsx)(material_1.DialogContent, { sx: { bgcolor: 'background.paper' }, children: (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: { mt: 2 }, children: [(0, jsx_runtime_1.jsxs)(material_1.Typography, { variant: \"subtitle2\", gutterBottom: true, color: \"text.primary\", children: [\"Date: \", (0, date_fns_1.format)(selectedDate, 'MMMM d, yyyy')] }), !habit.trackQuantity ? ((0, jsx_runtime_1.jsx)(material_1.FormControlLabel, { control: (0, jsx_runtime_1.jsx)(material_1.Checkbox, { checked: useCheckbox, onChange: (e) => setUseCheckbox(e.target.checked), sx: {\n                                            color: habit.color,\n                                            '&.Mui-checked': {\n                                                color: habit.color,\n                                            }\n                                        } }), label: (0, jsx_runtime_1.jsx)(material_1.Typography, { color: \"text.primary\", children: \"Mark as completed\" }) })) : (\n                                // For habits that track quantity, always show the quantity field\n                                (0, jsx_runtime_1.jsx)(material_1.TextField, { fullWidth: true, type: \"number\", label: `Quantity${habit.unit ? ` (${habit.unit})` : ''}`, value: quantity, onChange: (e) => {\n                                        const val = e.target.value;\n                                        if (val === '' || (Number(val) >= 0 && Number(val) <= 1000000)) {\n                                            setQuantity(val === '' ? '' : Number(val));\n                                        }\n                                    }, sx: {\n                                        mt: 1,\n                                        '& .MuiOutlinedInput-root': {\n                                            '&.Mui-focused fieldset': {\n                                                borderColor: habit.color,\n                                            },\n                                        },\n                                        '& .MuiInputLabel-root.Mui-focused': {\n                                            color: habit.color,\n                                        },\n                                    }, inputProps: {\n                                        min: 0,\n                                        max: 1000000,\n                                    } }))] }) }), (0, jsx_runtime_1.jsxs)(material_1.DialogActions, { sx: { px: 3, py: 2, borderTop: '1px solid', borderColor: 'divider', bgcolor: 'background.paper' }, children: [(0, jsx_runtime_1.jsx)(material_1.Button, { onClick: () => setIsLogDialogOpen(false), sx: { borderRadius: '20px', px: 2 }, children: \"Cancel\" }), isDayCompleted(selectedDate) && ((0, jsx_runtime_1.jsx)(material_1.Button, { color: \"warning\", onClick: () => {\n                                    onToggleCompletion((0, date_fns_1.format)(selectedDate, 'yyyy-MM-dd'));\n                                    setIsLogDialogOpen(false);\n                                }, sx: { borderRadius: '20px', px: 2 }, children: \"Undo\" })), (0, jsx_runtime_1.jsx)(material_1.Button, { onClick: handleLogSubmit, variant: \"contained\", disabled: habit.trackQuantity && quantity === '', sx: {\n                                    borderRadius: '20px',\n                                    px: 2,\n                                    background: `linear-gradient(45deg, ${habit.color} 30%, ${habit.color}99 90%)`,\n                                    boxShadow: `0 3px 5px 2px ${habit.color}33`,\n                                }, children: \"Save\" })] })] }), (0, jsx_runtime_1.jsxs)(material_1.Dialog, { open: isDeleteDialogOpen, onClose: () => setIsDeleteDialogOpen(false), maxWidth: \"xs\", fullWidth: true, PaperProps: {\n                    sx: {\n                        borderRadius: '12px',\n                        boxShadow: mode === 'dark'\n                            ? '0 8px 30px rgba(0,0,0,0.5)'\n                            : '0 8px 30px rgba(0,0,0,0.12)',\n                        overflow: 'hidden',\n                        bgcolor: 'background.paper',\n                    }\n                }, children: [(0, jsx_runtime_1.jsx)(material_1.DialogTitle, { sx: {\n                            borderBottom: '1px solid',\n                            borderColor: 'divider',\n                            pb: 2,\n                            bgcolor: mode === 'dark' ? '#3a0505' : '#ffebee', // Dark/light red background\n                            color: mode === 'dark' ? '#ff5252' : '#d32f2f',\n                        }, children: \"Delete Habit\" }), (0, jsx_runtime_1.jsx)(material_1.DialogContent, { sx: { mt: 2, bgcolor: 'background.paper' }, children: (0, jsx_runtime_1.jsxs)(material_1.Typography, { color: \"text.primary\", children: [\"Are you sure you want to delete \\\"\", habit.name, \"\\\"? This action cannot be undone.\"] }) }), (0, jsx_runtime_1.jsxs)(material_1.DialogActions, { sx: { px: 3, py: 2, borderTop: '1px solid', borderColor: 'divider', bgcolor: 'background.paper' }, children: [(0, jsx_runtime_1.jsx)(material_1.Button, { onClick: () => setIsDeleteDialogOpen(false), sx: { borderRadius: '20px', px: 2 }, children: \"Cancel\" }), (0, jsx_runtime_1.jsx)(material_1.Button, { onClick: () => {\n                                    onDelete();\n                                    setIsDeleteDialogOpen(false);\n                                }, color: \"error\", variant: \"contained\", sx: { borderRadius: '20px', px: 2 }, children: \"Delete\" })] })] })] }));\n};\nexports[\"default\"] = HabitCard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///587222\n");

/***/ })

});