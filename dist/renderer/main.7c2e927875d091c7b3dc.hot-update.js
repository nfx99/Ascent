"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateascent"]("main",{

/***/ 587222:
/*!***********************************************!*\
  !*** ./src/renderer/components/HabitCard.tsx ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ 474848);\nconst react_1 = __importStar(__webpack_require__(/*! react */ 296540));\nconst material_1 = __webpack_require__(/*! @mui/material */ 495304);\nconst icons_material_1 = __webpack_require__(/*! @mui/icons-material */ 465113);\nconst date_fns_1 = __webpack_require__(/*! date-fns */ 917705);\nconst ThemeContext_1 = __webpack_require__(/*! ../context/ThemeContext */ 49211);\nconst styles_1 = __webpack_require__(/*! @mui/material/styles */ 278403);\nconst HabitCard = ({ habit, onToggleCompletion, onDelete }) => {\n    const { mode } = (0, ThemeContext_1.useTheme)();\n    const muiTheme = (0, styles_1.useTheme)();\n    const isSmallScreen = (0, material_1.useMediaQuery)(muiTheme.breakpoints.down('sm'));\n    const [isLogDialogOpen, setIsLogDialogOpen] = (0, react_1.useState)(false);\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = (0, react_1.useState)(false);\n    const [selectedDate, setSelectedDate] = (0, react_1.useState)(new Date());\n    const [quantity, setQuantity] = (0, react_1.useState)('');\n    const [useCheckbox, setUseCheckbox] = (0, react_1.useState)(true);\n    const [selectedYear, setSelectedYear] = (0, react_1.useState)(new Date().getFullYear());\n    const [hoveredDate, setHoveredDate] = (0, react_1.useState)(null);\n    // Define constants first\n    const CELL_GAP = 1; // Minimum gap for compact layout\n    const WEEKDAY_LABEL_WIDTH = 15; // Smaller width for weekday labels\n    // Debug function to log grid information\n    const debugGridInfo = (0, react_1.useCallback)((grid) => {\n        const totalWeeks = grid.length;\n        const daysInFullYear = new Date(selectedYear, 0, 0).getDate() === 366 ? 366 : 365;\n        const daysInCurrentYear = grid.flat().filter(date => date.getFullYear() === selectedYear).length;\n        const jan1 = grid.flat().find(date => date.getFullYear() === selectedYear && date.getMonth() === 0 && date.getDate() === 1);\n        const dec31 = grid.flat().find(date => date.getFullYear() === selectedYear && date.getMonth() === 11 && date.getDate() === 31);\n        console.log(`Grid for ${selectedYear}: ${totalWeeks} weeks Ã— 7 days`);\n        console.log(`Days in year: ${daysInFullYear}, days displayed from year: ${daysInCurrentYear}`);\n        console.log(`Jan 1 present: ${!!jan1}, Dec 31 present: ${!!dec31}`);\n        // Check if the grid is 52 or 53 weeks (standard for a year)\n        const isStandardSize = totalWeeks >= 52 && totalWeeks <= 53;\n        console.log(`Grid size check: ${isStandardSize ? 'PASSED' : 'FAILED'} - ${totalWeeks} weeks (should be 52-53)`);\n        return {\n            size: totalWeeks,\n            daysInYear: daysInCurrentYear,\n            hasJan1: !!jan1,\n            hasDec31: !!dec31,\n            isCorrectSize: isStandardSize\n        };\n    }, [selectedYear]);\n    // Build grid: grid[col][row] = date or null\n    // Col = week, Row = weekday\n    const grid = (0, react_1.useMemo)(() => {\n        // Get the start and end dates for the year\n        const jan1 = new Date(selectedYear, 0, 1);\n        const dec31 = new Date(selectedYear, 11, 31);\n        // Find the first Sunday before or on Jan 1\n        const firstDayOfGrid = new Date(jan1);\n        const firstDayOfWeek = (0, date_fns_1.getDay)(firstDayOfGrid);\n        firstDayOfGrid.setDate(firstDayOfGrid.getDate() - firstDayOfWeek);\n        // Find the last Saturday after or on Dec 31\n        const lastDayOfGrid = new Date(dec31);\n        const lastDayOfWeek = (0, date_fns_1.getDay)(lastDayOfGrid);\n        lastDayOfGrid.setDate(lastDayOfGrid.getDate() + (6 - lastDayOfWeek));\n        // Calculate the total number of weeks\n        const totalWeeks = Math.ceil((lastDayOfGrid.getTime() - firstDayOfGrid.getTime()) / (7 * 24 * 60 * 60 * 1000));\n        // Create the grid with the correct number of weeks\n        const newGrid = [];\n        // Start with the first day of the grid\n        let currentDate = new Date(firstDayOfGrid);\n        // Generate all weeks\n        for (let week = 0; week < totalWeeks; week++) {\n            const weekRow = [];\n            // Generate days for each week\n            for (let day = 0; day < 7; day++) {\n                weekRow.push(new Date(currentDate));\n                currentDate.setDate(currentDate.getDate() + 1);\n            }\n            newGrid.push(weekRow);\n        }\n        // Check if December 31st is included in the grid\n        const hasDec31 = newGrid.flat().some(date => date.getFullYear() === selectedYear && date.getMonth() === 11 && date.getDate() === 31);\n        // If December 31st is missing, add additional weeks until we include it\n        if (!hasDec31) {\n            console.warn(`December 31st, ${selectedYear} is missing from the grid. Extending grid.`);\n            // Continue where we left off\n            let additionalDate = new Date(currentDate);\n            // Add up to 4 additional weeks (should be enough in all cases)\n            for (let week = 0; week < 4; week++) {\n                const weekRow = [];\n                for (let day = 0; day < 7; day++) {\n                    weekRow.push(new Date(additionalDate));\n                    additionalDate.setDate(additionalDate.getDate() + 1);\n                    // Check if we've now included December 31st\n                    if (additionalDate.getFullYear() === selectedYear + 1) {\n                        const hasDec31Now = newGrid.flat().concat(weekRow).some(date => date.getFullYear() === selectedYear && date.getMonth() === 11 && date.getDate() === 31);\n                        if (hasDec31Now) {\n                            break;\n                        }\n                    }\n                }\n                newGrid.push(weekRow);\n                // Check if December 31st is now in the grid after adding this week\n                const containsDec31 = newGrid.flat().some(date => date.getFullYear() === selectedYear && date.getMonth() === 11 && date.getDate() === 31);\n                if (containsDec31) {\n                    console.log(`Grid extended. December 31st, ${selectedYear} is now included.`);\n                    break;\n                }\n            }\n        }\n        // Count days in the current year for debugging\n        const daysInYear = new Date(selectedYear, 1, 29).getDate() === 29 ? 366 : 365;\n        const daysInCurrentYear = newGrid.flat().filter(date => date.getFullYear() === selectedYear).length;\n        // Log debug info\n        console.log(`Calendar grid for ${selectedYear}: ${newGrid.length} weeks (${newGrid.length}x7), ${daysInCurrentYear}/${daysInYear} days in year`);\n        console.log(`First date in grid: ${(0, date_fns_1.format)(newGrid[0][0], 'yyyy-MM-dd')}`);\n        console.log(`Last date in grid: ${(0, date_fns_1.format)(newGrid[newGrid.length - 1][6], 'yyyy-MM-dd')}`);\n        return newGrid;\n    }, [selectedYear]);\n    // Define dynamic cell size based on available width\n    const calculateCellSize = (0, react_1.useCallback)(() => {\n        // Calculate available width, accounting for padding and labels\n        const isSmallScreen = window.innerWidth < 600;\n        const isMediumScreen = window.innerWidth >= 600 && window.innerWidth < 960;\n        // Reduce padding on smaller screens to maximize space for the grid\n        const containerPadding = isSmallScreen ? 20 : isMediumScreen ? 40 : 60;\n        const availableWidth = Math.min(window.innerWidth - containerPadding, 1100);\n        // Account for weekday labels\n        const effectiveWidth = availableWidth - WEEKDAY_LABEL_WIDTH;\n        // Calculate cell size based on available width and total weeks\n        // We need to fit all 53 weeks (max in a year) plus gaps\n        const totalWeeks = grid.length;\n        const totalGaps = totalWeeks - 1;\n        // Calculate cell size\n        const cellSize = (effectiveWidth - (totalGaps * CELL_GAP)) / totalWeeks;\n        // Clamp to reasonable size range\n        return Math.max(Math.min(Math.floor(cellSize * 10) / 10, 10), 2.8);\n    }, [grid]);\n    // Calculate cell size and update on window resize\n    const [CELL_SIZE, setCellSize] = (0, react_1.useState)(() => calculateCellSize());\n    (0, react_1.useEffect)(() => {\n        // Update cell size on window resize\n        const handleResize = () => {\n            setCellSize(calculateCellSize());\n        };\n        // Initial calculation\n        setCellSize(calculateCellSize());\n        // Debug grid information\n        debugGridInfo(grid);\n        // Add resize event listener\n        window.addEventListener('resize', handleResize);\n        // Cleanup\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [calculateCellSize, grid, debugGridInfo]);\n    // Simple month labels positioned at exact 4-column intervals\n    const monthLabels = (0, react_1.useMemo)(() => {\n        // Define the month names\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        // Find the column index for the first day of the selected year\n        let startColumn = 0;\n        // Create the labels at exact 4-column intervals\n        const spacing = 4; // Exactly 4 columns apart\n        const labels = [];\n        for (let i = 0; i < monthNames.length; i++) {\n            const col = startColumn + (i * spacing);\n            // If we've gone beyond the grid, stop adding labels\n            if (col >= grid.length)\n                break;\n            labels.push({\n                month: monthNames[i],\n                col // Using 'col' for consistency with existing code\n            });\n        }\n        return labels;\n    }, [grid, selectedYear]);\n    const isHabitCompleted = (0, react_1.useCallback)((date) => {\n        return habit.completions.some(completion => completion.date === (0, date_fns_1.format)(date, 'yyyy-MM-dd'));\n    }, [habit.completions]);\n    const calculateStreak = (0, react_1.useCallback)(() => {\n        let streak = 0;\n        const today = new Date();\n        let currentDate = new Date();\n        while (isHabitCompleted(currentDate) && !(0, date_fns_1.isAfter)(currentDate, today)) {\n            streak++;\n            currentDate.setDate(currentDate.getDate() - 1);\n        }\n        return streak;\n    }, [isHabitCompleted]);\n    const handleLogSubmit = (0, react_1.useCallback)(() => {\n        // For habits that track quantity, use the quantity value\n        if (habit.trackQuantity) {\n            if (quantity !== '') {\n                onToggleCompletion((0, date_fns_1.format)(selectedDate, 'yyyy-MM-dd'), Number(quantity));\n            }\n        }\n        else {\n            // For non-quantity habits, always mark as completed\n            onToggleCompletion((0, date_fns_1.format)(selectedDate, 'yyyy-MM-dd'));\n        }\n        setIsLogDialogOpen(false);\n        setQuantity('');\n        setUseCheckbox(true);\n    }, [habit.trackQuantity, selectedDate, quantity, onToggleCompletion]);\n    const handleDayClick = (0, react_1.useCallback)((day) => {\n        if ((0, date_fns_1.isAfter)(day, new Date())) {\n            return; // Don't allow logging future dates\n        }\n        setSelectedDate(day);\n        setIsLogDialogOpen(true);\n    }, []);\n    const streak = (0, react_1.useMemo)(() => calculateStreak(), [calculateStreak]);\n    const isDayCompleted = (0, react_1.useCallback)((date) => {\n        return habit.completions.some(completion => completion.date === (0, date_fns_1.format)(date, 'yyyy-MM-dd'));\n    }, [habit.completions]);\n    const handlePrevYear = (0, react_1.useCallback)(() => {\n        setSelectedYear(prev => prev - 1);\n    }, []);\n    const handleNextYear = (0, react_1.useCallback)(() => {\n        setSelectedYear(prev => prev + 1);\n    }, []);\n    // Get completion for a specific date\n    const getCompletion = (0, react_1.useCallback)((date) => {\n        const dateStr = (0, date_fns_1.format)(date, 'yyyy-MM-dd');\n        return habit.completions.find(c => c.date === dateStr);\n    }, [habit.completions]);\n    return ((0, jsx_runtime_1.jsx)(material_1.Paper, { elevation: 0, sx: {\n            p: { xs: 1, sm: 1.5, md: 2 },\n            pb: 1.5,\n            mb: 3,\n            bgcolor: 'background.paper',\n            display: 'flex',\n            flexDirection: 'column',\n            border: '1px solid',\n            borderColor: 'divider',\n            borderRadius: '8px',\n            boxShadow: mode === 'dark'\n                ? '0 3px 10px rgba(0,0,0,0.35)'\n                : '0 3px 10px rgba(0,0,0,0.08)',\n            width: '100%',\n            maxWidth: '100%',\n            position: 'relative',\n            overflow: 'hidden'\n        }, children: (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                width: '100%',\n                mx: 'auto',\n                mb: 1,\n                position: 'relative',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            }, children: [(0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"h5\", align: \"center\", noWrap: true, title: habit.name, sx: {\n                        mt: 0.5,\n                        mb: 1.5,\n                        width: '100%',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        color: habit.color,\n                        fontWeight: 600,\n                        letterSpacing: '0.01em',\n                        textShadow: mode === 'dark'\n                            ? '0 1px 2px rgba(0,0,0,0.3)'\n                            : '0 1px 1px rgba(0,0,0,0.1)',\n                        fontSize: '1.3rem',\n                        borderBottom: `2px solid ${habit.color}33`,\n                        paddingBottom: 0.75,\n                        position: 'relative',\n                        '&::after': {\n                            content: '\"\"',\n                            position: 'absolute',\n                            bottom: '-2px',\n                            left: 0,\n                            width: '100%',\n                            borderBottom: `2px solid ${habit.color}33`,\n                        }\n                    }, children: habit.name }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                        mb: 1,\n                        px: 1,\n                    }, children: [(0, jsx_runtime_1.jsx)(material_1.Box, { sx: { display: 'flex', alignItems: 'center' }, children: (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: { display: 'flex', alignItems: 'center' }, children: [(0, jsx_runtime_1.jsx)(material_1.IconButton, { size: \"small\", onClick: handlePrevYear, sx: { color: 'text.primary', p: 0.7 }, children: (0, jsx_runtime_1.jsx)(icons_material_1.ChevronLeft, { fontSize: \"small\" }) }), (0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"body2\", sx: {\n                                            mx: 0.7,\n                                            fontWeight: 'bold',\n                                            color: 'text.primary',\n                                            fontSize: '0.9rem'\n                                        }, children: selectedYear }), (0, jsx_runtime_1.jsx)(material_1.IconButton, { size: \"small\", onClick: handleNextYear, disabled: selectedYear >= new Date().getFullYear(), sx: { color: 'text.primary', p: 0.7 }, children: (0, jsx_runtime_1.jsx)(icons_material_1.ChevronRight, { fontSize: \"small\" }) })] }) }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: { display: 'flex', alignItems: 'center', gap: 0.7 }, children: [(0, jsx_runtime_1.jsx)(material_1.Tooltip, { title: `Current streak: ${streak} days`, children: (0, jsx_runtime_1.jsxs)(material_1.Typography, { variant: \"body2\", color: \"text.secondary\", sx: {\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            fontSize: '0.9rem'\n                                        }, children: [\"\\uD83D\\uDD25 \", (0, jsx_runtime_1.jsx)(\"span\", { style: { fontWeight: 'bold', marginLeft: '3px' }, children: streak })] }) }), (0, jsx_runtime_1.jsx)(material_1.Button, { variant: \"contained\", size: \"small\", startIcon: (0, jsx_runtime_1.jsx)(icons_material_1.Add, { fontSize: \"small\" }), onClick: () => {\n                                        setSelectedDate(new Date());\n                                        setIsLogDialogOpen(true);\n                                    }, sx: {\n                                        py: 0.5,\n                                        px: 1.5,\n                                        minWidth: '55px',\n                                        fontSize: '0.8rem',\n                                        bgcolor: `${habit.color}99`,\n                                        '&:hover': {\n                                            bgcolor: `${habit.color}cc`,\n                                        }\n                                    }, children: \"Log\" }), (0, jsx_runtime_1.jsx)(material_1.IconButton, { size: \"small\", color: \"error\", onClick: () => setIsDeleteDialogOpen(true), sx: { p: 0.7 }, children: (0, jsx_runtime_1.jsx)(icons_material_1.Delete, { fontSize: \"small\" }) })] })] }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                        width: '100%',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center', // Center the calendar horizontally\n                        position: 'relative',\n                        mt: 0.5,\n                        mb: 0.5,\n                        transform: `scale(${grid.length > 53 ? 0.95 : 1})`, // Slight scale down if many weeks\n                        transformOrigin: 'center top'\n                    }, children: [(0, jsx_runtime_1.jsx)(material_1.Box, { sx: {\n                                display: 'flex',\n                                width: `calc(${grid.length * (CELL_SIZE + CELL_GAP)}px)`,\n                                mb: 0.8,\n                                ml: `${WEEKDAY_LABEL_WIDTH}px`,\n                                position: 'relative',\n                                height: '20px'\n                            }, children: monthLabels.map((label, idx) => ((0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                                    position: 'absolute',\n                                    left: `${label.col * (CELL_SIZE + CELL_GAP)}px`,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                    width: CELL_SIZE * 3, // Make label wider\n                                    transform: 'translateX(-33%)', // Center above the column\n                                }, children: [(0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"caption\", sx: {\n                                            fontSize: '0.65rem',\n                                            color: 'text.primary',\n                                            fontWeight: '600',\n                                            bgcolor: mode === 'dark' ? 'rgba(255,255,255,0.08)' : 'rgba(0,0,0,0.04)',\n                                            px: 1,\n                                            py: 0.3,\n                                            borderRadius: '10px',\n                                            border: '1px solid',\n                                            borderColor: mode === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.08)',\n                                        }, children: label.month }), (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: {\n                                            display: 'grid',\n                                            gridTemplateColumns: `${WEEKDAY_LABEL_WIDTH}px repeat(${grid.length}, ${CELL_SIZE}px)`,\n                                            gridTemplateRows: `repeat(7, ${CELL_SIZE}px)`,\n                                            gap: CELL_GAP,\n                                            mb: 0,\n                                            maxWidth: '100%',\n                                            justifyContent: 'center', // Center the grid horizontally\n                                            paddingBottom: '1px'\n                                        }, children: [[0, 1, 2, 3, 4, 5, 6].map((weekday) => ((0, jsx_runtime_1.jsx)(material_1.Box, { sx: {\n                                                    gridColumn: 1,\n                                                    gridRow: weekday + 1,\n                                                    justifySelf: 'end',\n                                                    pr: 0.3,\n                                                    width: WEEKDAY_LABEL_WIDTH - 2,\n                                                    height: CELL_SIZE,\n                                                    display: 'flex',\n                                                    alignItems: 'center',\n                                                    justifyContent: 'flex-end',\n                                                    bgcolor: mode === 'dark' ? 'background.paper' : 'background.paper'\n                                                }, children: (0, jsx_runtime_1.jsx)(material_1.Typography, { variant: \"caption\", sx: {\n                                                        fontSize: CELL_SIZE < 4 ? '0.5rem' : '0.55rem',\n                                                        color: 'text.secondary',\n                                                        lineHeight: 1\n                                                    }, children: ['S', 'M', 'T', 'W', 'T', 'F', 'S'][weekday] }) }, weekday))), grid.map((weekColumn, colIdx) => (weekColumn.map((day, rowIdx) => {\n                                                // Get the date for this cell position from our grid\n                                                const cellDate = day;\n                                                // Check if this cell's date is in the current year\n                                                const isInCurrentYear = cellDate.getFullYear() === selectedYear;\n                                                // Check if this is the first day of a month\n                                                const isFirstDayOfMonth = cellDate.getDate() === 1;\n                                                const isCompleted = isDayCompleted(cellDate);\n                                                const isFuture = (0, date_fns_1.isAfter)(cellDate, new Date());\n                                                const isCurrentDay = (0, date_fns_1.isToday)(cellDate);\n                                                // Get completion details for tooltip\n                                                const completion = getCompletion(cellDate);\n                                                // Format date for tooltip\n                                                const formattedDate = (0, date_fns_1.format)(cellDate, 'EEEE, MMMM d, yyyy');\n                                                // Tooltip content\n                                                const tooltipContent = isInCurrentYear\n                                                    ? (isCompleted\n                                                        ? `${formattedDate}${completion?.quantity ? ` â€¢ ${completion.quantity} ${habit.unit || 'units'}` : ' â€¢ Completed'}`\n                                                        : formattedDate)\n                                                    : '';\n                                                // Scale cell border based on cell size\n                                                const borderWidth = CELL_SIZE > 5 ? 1 : 0.5;\n                                                return ((0, jsx_runtime_1.jsx)(material_1.Tooltip, { title: tooltipContent, placement: \"top\", enterDelay: 500, arrow: true, disableHoverListener: !isInCurrentYear, children: (0, jsx_runtime_1.jsx)(material_1.Box, { sx: {\n                                                            gridColumn: colIdx + 2, // +2 because first column is for weekday labels\n                                                            gridRow: rowIdx + 1,\n                                                            width: CELL_SIZE,\n                                                            height: CELL_SIZE,\n                                                            bgcolor: isCompleted && isInCurrentYear\n                                                                ? habit.color + (mode === 'dark' ? 'cc' : 'bb')\n                                                                : mode === 'dark'\n                                                                    ? (isInCurrentYear ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0)')\n                                                                    : (isInCurrentYear ? 'transparent' : 'rgba(0,0,0,0)'),\n                                                            border: isInCurrentYear\n                                                                ? `${borderWidth}px solid ${mode === 'dark' ? '#444' : '#e0e0e0'}`\n                                                                : 'none',\n                                                            borderRadius: CELL_SIZE > 5 ? '1px' : '0px',\n                                                            cursor: (isFuture || !isInCurrentYear) ? 'default' : 'pointer',\n                                                            opacity: isFuture ? 0.3 : (isInCurrentYear ? 1 : 0.2),\n                                                            transition: 'background-color 0.2s, transform 0.15s',\n                                                            // Highlight first day of each month with stronger border\n                                                            borderLeft: isFirstDayOfMonth && isInCurrentYear\n                                                                ? `${borderWidth + 0.5}px solid ${mode === 'dark' ? 'rgba(255,255,255,0.4)' : 'rgba(0,0,0,0.4)'}`\n                                                                : undefined,\n                                                            // Highlight current day\n                                                            ...(isCurrentDay && {\n                                                                boxShadow: `0 0 0 ${borderWidth + 0.5}px ${habit.color}`\n                                                            }),\n                                                            // Hover effect for larger cells\n                                                            '&:hover': CELL_SIZE > 4 && isInCurrentYear && !isFuture ? {\n                                                                transform: 'scale(1.2)',\n                                                                zIndex: 10,\n                                                                boxShadow: `0 2px 4px rgba(0,0,0,0.2)`,\n                                                                bgcolor: isCompleted\n                                                                    ? habit.color + 'ee'\n                                                                    : mode === 'dark' ? 'rgba(255,255,255,0.15)' : 'rgba(0,0,0,0.05)'\n                                                            } : {},\n                                                            position: 'relative',\n                                                        }, onClick: () => isInCurrentYear && !isFuture && handleDayClick(cellDate), onMouseEnter: () => setHoveredDate(cellDate), onMouseLeave: () => setHoveredDate(null) }) }, `cell-${colIdx}-${rowIdx}`));\n                                            })))] })] }, idx))) }), (0, jsx_runtime_1.jsxs)(material_1.Dialog, { open: isLogDialogOpen, onClose: () => setIsLogDialogOpen(false), maxWidth: \"xs\", fullWidth: true, PaperProps: {\n                                sx: {\n                                    borderRadius: '12px',\n                                    boxShadow: mode === 'dark'\n                                        ? '0 8px 30px rgba(0,0,0,0.5)'\n                                        : '0 8px 30px rgba(0,0,0,0.12)',\n                                    overflow: 'hidden',\n                                    bgcolor: 'background.paper',\n                                }\n                            }, children: [(0, jsx_runtime_1.jsxs)(material_1.DialogTitle, { sx: {\n                                        borderBottom: '1px solid',\n                                        borderColor: 'divider',\n                                        pb: 2,\n                                        background: `linear-gradient(45deg, ${habit.color} 30%, ${habit.color}99 90%)`,\n                                        color: '#fff',\n                                    }, children: [\"Log \", habit.name] }), (0, jsx_runtime_1.jsx)(material_1.DialogContent, { sx: { bgcolor: 'background.paper' }, children: (0, jsx_runtime_1.jsxs)(material_1.Box, { sx: { mt: 2 }, children: [(0, jsx_runtime_1.jsxs)(material_1.Typography, { variant: \"subtitle2\", gutterBottom: true, color: \"text.primary\", children: [\"Date: \", (0, date_fns_1.format)(selectedDate, 'MMMM d, yyyy')] }), !habit.trackQuantity ? ((0, jsx_runtime_1.jsx)(material_1.FormControlLabel, { control: (0, jsx_runtime_1.jsx)(material_1.Checkbox, { checked: useCheckbox, onChange: (e) => setUseCheckbox(e.target.checked), sx: {\n                                                        color: habit.color,\n                                                        '&.Mui-checked': {\n                                                            color: habit.color,\n                                                        }\n                                                    } }), label: (0, jsx_runtime_1.jsx)(material_1.Typography, { color: \"text.primary\", children: \"Mark as completed\" }) })) : (\n                                            // For habits that track quantity, always show the quantity field\n                                            (0, jsx_runtime_1.jsx)(material_1.TextField, { fullWidth: true, type: \"number\", label: `Quantity${habit.unit ? ` (${habit.unit})` : ''}`, value: quantity, onChange: (e) => {\n                                                    const val = e.target.value;\n                                                    if (val === '' || (Number(val) >= 0 && Number(val) <= 1000000)) {\n                                                        setQuantity(val === '' ? '' : Number(val));\n                                                    }\n                                                }, sx: {\n                                                    mt: 1,\n                                                    '& .MuiOutlinedInput-root': {\n                                                        '&.Mui-focused fieldset': {\n                                                            borderColor: habit.color,\n                                                        },\n                                                    },\n                                                    '& .MuiInputLabel-root.Mui-focused': {\n                                                        color: habit.color,\n                                                    },\n                                                }, inputProps: {\n                                                    min: 0,\n                                                    max: 1000000,\n                                                } }))] }) }), (0, jsx_runtime_1.jsxs)(material_1.DialogActions, { sx: { px: 3, py: 2, borderTop: '1px solid', borderColor: 'divider', bgcolor: 'background.paper' }, children: [(0, jsx_runtime_1.jsx)(material_1.Button, { onClick: () => setIsLogDialogOpen(false), sx: { borderRadius: '20px', px: 2 }, children: \"Cancel\" }), isDayCompleted(selectedDate) && ((0, jsx_runtime_1.jsx)(material_1.Button, { color: \"warning\", onClick: () => {\n                                                onToggleCompletion((0, date_fns_1.format)(selectedDate, 'yyyy-MM-dd'));\n                                                setIsLogDialogOpen(false);\n                                            }, sx: { borderRadius: '20px', px: 2 }, children: \"Undo\" })), (0, jsx_runtime_1.jsx)(material_1.Button, { onClick: handleLogSubmit, variant: \"contained\", disabled: habit.trackQuantity && quantity === '', sx: {\n                                                borderRadius: '20px',\n                                                px: 2,\n                                                background: `linear-gradient(45deg, ${habit.color} 30%, ${habit.color}99 90%)`,\n                                                boxShadow: `0 3px 5px 2px ${habit.color}33`,\n                                            }, children: \"Save\" })] })] }), (0, jsx_runtime_1.jsxs)(material_1.Dialog, { open: isDeleteDialogOpen, onClose: () => setIsDeleteDialogOpen(false), maxWidth: \"xs\", fullWidth: true, PaperProps: {\n                                sx: {\n                                    borderRadius: '12px',\n                                    boxShadow: mode === 'dark'\n                                        ? '0 8px 30px rgba(0,0,0,0.5)'\n                                        : '0 8px 30px rgba(0,0,0,0.12)',\n                                    overflow: 'hidden',\n                                    bgcolor: 'background.paper',\n                                }\n                            }, children: [(0, jsx_runtime_1.jsx)(material_1.DialogTitle, { sx: {\n                                        borderBottom: '1px solid',\n                                        borderColor: 'divider',\n                                        pb: 2,\n                                        bgcolor: mode === 'dark' ? '#3a0505' : '#ffebee', // Dark/light red background\n                                        color: mode === 'dark' ? '#ff5252' : '#d32f2f',\n                                    }, children: \"Delete Habit\" }), (0, jsx_runtime_1.jsx)(material_1.DialogContent, { sx: { mt: 2, bgcolor: 'background.paper' }, children: (0, jsx_runtime_1.jsxs)(material_1.Typography, { color: \"text.primary\", children: [\"Are you sure you want to delete \\\"\", habit.name, \"\\\"? This action cannot be undone.\"] }) }), (0, jsx_runtime_1.jsxs)(material_1.DialogActions, { sx: { px: 3, py: 2, borderTop: '1px solid', borderColor: 'divider', bgcolor: 'background.paper' }, children: [(0, jsx_runtime_1.jsx)(material_1.Button, { onClick: () => setIsDeleteDialogOpen(false), sx: { borderRadius: '20px', px: 2 }, children: \"Cancel\" }), (0, jsx_runtime_1.jsx)(material_1.Button, { onClick: () => {\n                                                onDelete();\n                                                setIsDeleteDialogOpen(false);\n                                            }, color: \"error\", variant: \"contained\", sx: { borderRadius: '20px', px: 2 }, children: \"Delete\" })] })] })] }), \"); }; export default HabitCard; \"] }) }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///587222\n");

/***/ })

});